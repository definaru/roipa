/**
 * License : GNU - v3
 * Email   : info@defina.ru
 * @author : Inc. Defina
 * site^   : https://defina.ru
 */
var scroll_position = 0;
if(document.location.pathname === '/') {
    window.addEventListener('scroll', function(e) {
        scroll_position = window.scrollY;
        //console.log('scroll_position', scroll_position);
        if (scroll_position >= 100) {
            $('#navigation').removeClass("hero").addClass("bg-white");
            $('.navbar').addClass("py-0");
        } else {
            $('#navigation').removeClass("bg-white").addClass("hero");
            $('.navbar').removeClass("py-0")
        }
    });
} else {
    $('#navigation').addClass('bg-white');
}




const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
const notification = document.getElementById('notification');

if(localStorage.getItem('notification') !== null) {
    notification.classList.remove('d-flex');
    notification.classList.add('d-none');
}
var swiper = new Swiper(".roipa", {
    navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev",
    },
});

Fancybox.bind("[data-fancybox]", {
    Html: {
        video: {
            autoplay: true,
        }
    }
});
 


var except = document.getElementById('except');
var myModal = new bootstrap.Modal(document.getElementById('myModal'), {});
   
new Vue({
    el: '#subscribers',
    data: {
        name: '',
        email: '',
        tosAgreement: false,
        button: '<span class="material-symbols-outlined">outgoing_mail</span> Отправить',
        send: false,
        loading: false,
        error_email: false,
        error_names: false,
        error_agree: false,
        email_invalid: false,
        result: ''
    },
    computed: {
        isValid () {
            return this.name && this.email && this.tosAgreement
        }
    },
    methods: {
        onChange(event){
            console.log(event.target.value);
        },
        validEmail(email) {
            var re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(email);
        },
        Send () {
            if (this.isValid && !this.email_invalid) {
                this.button = 'Loading...';
                setTimeout(function () {
                    this.send = true
                }.bind(this), 2000)
            }

            if(!this.tosAgreement) {
                this.error_agree = true;
            }
            if(!this.name) {
                this.error_names = true;
            }            
            if(!this.email) {
                this.error_email = true;
            } else if (!this.validEmail(this.email)) {
                this.email_invalid = true;
                this.send = false;
            } else {
                this.email_invalid = false;
            }
        },
        postDataSubscribts(){
            var formdata = new FormData();
            formdata.append('name',  this.name);
            formdata.append('email', this.email);
            formdata.append('agree', this.tosAgreement);
            formdata.append('date',  +new Date);

            var requestOptions = {
                method: 'POST',
                body: formdata,
                redirect: 'follow'
            };

            fetch("http://roipa.host/wp-json/api/v1/subscribers", requestOptions)
                .then(response => response.json())
                .then(result => console.log(result))
                .catch(error => console.log('error', error));

            
            myModal.hide();
            localStorage.setItem('notification', 'none')
            toastr.options = {
                'timeOut': 10000,
                'positionClass': 'toast-bottom-left',
                'closeButton': true
            };
            toastr.success('Вы успешно подписаны', 'Поздравляем');
        },
        async save () {
            if (!this.isValid) return false;
            this.loading = true;
            this.postDataSubscribts()
            //var uuid = ([1e7]+1e3+8e3+1e11).replace(/[018]/g,
                //c=>(c^crypto.getRandomValues(new Uint8Array(1))[0]&15 >> c/4).toString(16));
            this.result = {
                //id: uuid,
                name: this.name,
                email: this.email,
                agree: this.tosAgreement,
                date: +new Date
            }           
            
        }
    }
});

new Vue({
    el: '#app',
    data: {
        agree: false,
        title: '',
        loading: true,
        newCart: null,
        count: 1,
		amount: 0,
        summa: except ? except.innerText : 0,
        totalSum: 0,
        totalCount: 0,
        card: []
    },
    computed: {
		totalAmount: function () {
            var value = this.card.reduce(
                (acc, current) => acc + Number(current.count), 0
            );
            this.amount = value;
        },
        totalSumma: function () {
            var sum = this.card.reduce(
                (acc, current) => acc + Number(current.price), 0
            );
            this.totalSum = sum;             
        }
    },
    mounted() {
        if (localStorage.getItem('cart')) {
            try {
                setTimeout(function () {
                    this.loading = false;
                }.bind(this), 500);
                var goods = JSON.parse(localStorage.getItem('cart'));
                var set = new Set(goods.map(JSON.stringify));
                var uniqArray = Array.from(set).map(JSON.parse);
                this.card = uniqArray;
                
            } catch(e) {
                localStorage.removeItem('cart');
                console.log('Error:', e)
            }
        }
    },
    methods: {
        Okey () {
            this.agree = true
            this.title = 'Выберите членство'
        },
        totalCounts: function () {
            this.totalCount = this.card.length;             
        },
        priceFormat: function(digital)
        {
            const num = parseInt(digital).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
            return num
        },
        getStartLink(url) {
            window.location.assign(url);
        },
        countGoods(n,s1,s2,s3, b = false) {
            let m = n % 10; j = n % 100;
            if(b) {n = n;}
            if(m==0 || m>=5 || (j>=10 && j<=20)) {return s3;}
            if(m>=2 && m<=4) {return s2;}
            return s1;
        },
        getURLaddress(href) {
            let url = new URL(href);
            return decodeURIComponent(url.pathname);
        },
        addToCart(type, author, name, image) {

            var added = JSON.parse(localStorage.getItem('cart'));
            var arr = added ? added : [added];
            var link = window.location.href;
            var data = {
                type,
                author,
                name,
                image: this.getURLaddress(image),
                price: this.summa*this.count,
                count: this.count,
                link: this.getURLaddress(link)
            }
            console.table(data);
            var total = arr.filter(el => el != null).concat(data);

            localStorage.setItem('cart', JSON.stringify(total));
            this.totalCounts();
            toastr.options.closeButton = true;
            toastr.success('Добавлен в корзину', `Товар "${name}"`);
			this.card.push(data);
            this.addCat();
        },
        addCat() {
            if (!this.newCart) {
                return;
            };
            this.card.push(this.newCart);
            this.newCart = '';
            this.saveCart();
        },
		inCrement(id) {
            var item = this.card.find(item => item.id === id);
            item.count++;
            item.price = Number(item.price)*Number(item.count);
            this.saveCart();
        },
        deCrement(id) {
            var item = this.card.find(item => item.id === id);
            item.count--;
            item.price = Number(item.price)*Number(item.count);
            this.saveCart();
        },
        removeCart(x) {
            this.card.splice(x, 1);
            this.saveCart();
        },
        saveCart() {
            const parsed = JSON.stringify(this.card);
            localStorage.setItem('cart', parsed);
        }
    }
});